client sendet startmsg
client wartet auf antwort
server prueft pid und setzt auf pid
server schaltet flag auf read
server sendet ok an client
client sendet msg
server schaltet flag auf waiting
{ //falls ein anderer client zwischendrin sendet
    client2 sendet startmsg
    server prueft pid -> pid schon gesetzt
    server speichert pid in fifo array
}
client sendet endmsg
server sendet resievemsg and client
client printed nachricht send-vorgang erfolgreich
{ //falls ein anderer client zwischendrin gesendet hat
    server sendet ok an client2
    client2 sendet msg
    server schaltet flag auf waiting
    client2 sendet endmsg
    server sendet resievemsg and client2
    client2 printed nachricht send-vorgang erfolgreich
}
..........

array mit fester groesse fuer x clients
ein static/oderglobal arraycnt der increased wird bei neuer client_pid und die pid in das array and den inx schreibt
ein static/oderglobal arraycnt der increased wird sobald ein msg vorgang eines clienten abgeschlossen wird
    dann wird auf die naechste pid im array zugegriffen
//ein Flag fuer den Server () // vielleicht nicht noetig.. nach endmsg eingang wird pid_zugriffs_arraycnter increased 
ein Flag fuer den Clienten - warten so lang der server noch ein ok geschickt hat